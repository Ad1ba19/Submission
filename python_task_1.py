# -*- coding: utf-8 -*-
"""Python Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WMpB1fGMEcfyObVLV0SoZ8VnRXmX7t8j

**Python Task 1**
"""

import pandas as pd

df = pd.read_csv('/content/dataset-1.csv')

"""Question 1: Car Matrix Generation"""

def generate_car_matrix(file_path):
    car_matrix = df.pivot(index='id_1', columns='id_2', values='car')
    car_matrix = car_matrix.fillna(0)
    return car_matrix


file_path = 'dataset-1.csv'
result_matrix = generate_car_matrix(file_path)

result_matrix

"""Question 2: Car Type Count Calculation"""

def get_type_count(file_path):
    df['car_type'] = pd.cut(df['car'],
                            bins=[float('-inf'), 15, 25, float('inf')],
                            labels=['low', 'medium', 'high'])
    type_count = df['car_type'].value_counts().to_dict()
    type_count = dict(sorted(type_count.items()))

    return type_count


file_path = 'dataset-1.csv'
result_type_count = get_type_count(file_path)
print(result_type_count)

"""Question 3: Bus Count Index Retrieval"""

def get_bus_indexes(file_path):
    mean_bus_value = df['bus'].mean()
    bus_indexes = df[df['bus'] > 2 * mean_bus_value].index.tolist()
    bus_indexes.sort()
    return bus_indexes


file_path = 'dataset-1.csv'
result_bus_indexes = get_bus_indexes(file_path)
print(result_bus_indexes)

"""Question 4: Route Filtering"""

def filter_routes(file_path):
    selected_routes = df.groupby('route')['truck'].mean().loc[lambda x: x > 7].index.tolist()
    selected_routes.sort()
    return selected_routes
file_path = 'dataset-1.csv'
result_selected_routes = filter_routes(file_path)
print(result_selected_routes)

"""Question 5: Matrix Value Modification"""

def multiply_matrix(result_matrix):
    modified_matrix = result_matrix.copy()
    modified_matrix[modified_matrix > 20] *= 0.75
    modified_matrix[modified_matrix <= 20] *= 1.25
    modified_matrix = modified_matrix.round(1)
    return modified_matrix


modified_result_matrix = multiply_matrix(result_matrix)

modified_result_matrix